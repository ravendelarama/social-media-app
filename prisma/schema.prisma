// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

enum UserStatus {
  private
  public
}

enum PostStatus {
  published
  archived
}

enum ActivityType {
  logged_in
  logged_out
}

enum MediaVariant {
  image
  video
}

enum LikeVariant {
  post
  comment
}

enum ConversationVariant {
  private
  group
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  username        String     @unique
  fullName        String?
  email           String?    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  status          UserStatus @default(public)
  role            UserRole   @default(user)
  isBanned        Boolean    @default(false)
  conversationIds String[]   @db.ObjectId

  accounts      Account[]
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])
  posts         Post[]
  activityLogs  ActivityLog[]
  likes         Like[]
  messages      Message[]

  @@unique([email, username])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ActivityLog {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?      @db.ObjectId
  type      ActivityType
  message   String
  createdAt DateTime     @default(now()) @db.Timestamp

  user User? @relation(fields: [userId], references: [id])
}

model Post {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  authorId   String     @db.ObjectId
  caption    String
  status     PostStatus
  createdAt  DateTime   @default(now()) @db.Timestamp
  updatedAt  DateTime   @updatedAt @db.Timestamp
  hashtagIds String[]   @db.ObjectId

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  medias   Media[]
  likes    Like[]
  hashtags HashTag[] @relation(fields: [hashtagIds], references: [id])
}

model Media {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  postId    String       @db.ObjectId
  source    String
  variant   MediaVariant
  createdAt DateTime     @default(now()) @db.Timestamp

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  variant   LikeVariant @default(post)
  postId    String?     @db.ObjectId
  commentId String?     @db.ObjectId
  createdAt DateTime    @default(now()) @db.Timestamp

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String   @db.ObjectId
  body      String
  parentId  String?  @db.ObjectId
  isHidden  Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  parent  Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Comment[] @relation("Replies")
  likes   Like[]
}

model HashTag {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  tag     String   @unique
  postIds String[] @db.ObjectId
  post    Post[]   @relation(fields: [postIds], references: [id])
}

model Conversation {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  variant    ConversationVariant @default(private)
  userIds    String[]            @db.ObjectId
  messageIds String[]            @db.ObjectId
  createdAt  DateTime            @default(now()) @db.Timestamp
  updatedAt  DateTime            @updatedAt @db.Timestamp

  messages Message[]
  users    User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String   @db.ObjectId
  body      String
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  author         User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?       @db.ObjectId
}
